<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	                    http://www.springframework.org/schema/tx
	                    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	                    http://www.springframework.org/schema/context
	                    http://www.springframework.org/schema/context/spring-context-3.0.xsd
	                    http://www.springframework.org/schema/mvc
	                    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	                    http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- This produces a container-managed EntityManagerFactory; rather than 
		application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean -->
	<!-- <bean id="entintyManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		This makes /META-INF/persistence.xml is no longer necessary
		<property name="packagesToScan" value="com.evaluateyourself.model" />
		JpaVendorAdapter implementation for Hibernate EntityManager. Exposes 
			Hibernate's persistence provider and EntityManager extension interface
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.default_schema">public</prop>
			</props>
		</property>
	</bean> -->
	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- sun:DataSource(I) wywodza sie liczne klasy do oznaczenia zbioru danych 
		rekomendowane do obsługi puli połączeń są ComboPooledDataSource, BasicDataSource 
		
	-->
	<bean id="myDataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="maxActive" value="15" />
		<property name="maxIdle" value="5" />
		<property name="maxWait" value="5000" />
	</bean>
		<!-- <property name="initialPoolSize" value="3"></property> <property name="minPoolSize" 
			value="5"></property> <property name="maxPoolSize" value="30"></property> 
			<property name="acquireIncrement" value="1"></property> -->
		<!-- com.mchange.v2.c3p0.ComboPooledDataSource -->
		<!-- <property name="properties"> <props> <prop key="socketTimeout">10</prop> 
			</props> </property> -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<property name="packagesToScan" value="com.madmatsoft.store3d.model"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.enable_lazy_load_no_trans">true</prop>
				<prop key="hibernate.default_schema">public</prop>
				<prop key="format_sql">true</prop>
				<prop key="use_sql_comments">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="allServicePointCut"
			expression="execution(* com.evaluateyourself.service.*Manager.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allServicePointCut" />
	</aop:config>
	
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice> -->
	
	<!-- <aop:config>
		<aop:pointcut id="userServicePointCut"
			expression="execution(* com.evaluateyourself.service*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="userServicePointCut" />
	</aop:config> -->
	<!-- This transaction manager is appropriate for applications that use a 
		single JPA EntityManagerFactory for transactional data access. JTA (usually 
		through JtaTransactionManager) is necessary for accessing multiple transactional 
		resources within the same transaction. -->
	<!-- <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entintyManagerFactory" />
	</bean> -->

</beans>
