<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/data/mongo
          				http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
	                    http://www.springframework.org/schema/beans 
	                    http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- This produces a container-managed EntityManagerFactory; rather than 
		application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean -->
	<bean id="dbProperties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">

		<property name="location" value="/resources/properties/db.properties" />

	</bean>
	<bean id="entintyManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<!-- This makes /META-INF/persistence.xml is no longer necessary -->
		<property name="packagesToScan" value="com.evaluateyourself.model" />
		<!-- JpaVendorAdapter implementation for Hibernate EntityManager. Exposes 
			Hibernate's persistence provider and EntityManager extension interface -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.default_schema">public</prop>
			</props>
		</property>
	</bean>
	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- sun:DataSource(I) wywodza sie liczne klasy do oznaczenia zbioru danych 
		rekomendowane do obsługi puli połączeń są ComboPooledDataSource, BasicDataSource 
		
	-->
	<bean id="myDataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="maxActive" value="15" />
		<property name="maxIdle" value="5" />
		<property name="maxWait" value="5000" />
		<!-- <property name="initialPoolSize" value="3"></property> <property name="minPoolSize" 
			value="5"></property> <property name="maxPoolSize" value="30"></property> 
			<property name="acquireIncrement" value="1"></property> -->
		<!-- com.mchange.v2.c3p0.ComboPooledDataSource -->
		<!-- <property name="properties"> <props> <prop key="socketTimeout">10</prop> 
			</props> </property> -->
	</bean>
	<!-- This transaction manager is appropriate for applications that use a 
		single JPA EntityManagerFactory for transactional data access. JTA (usually 
		through JtaTransactionManager) is necessary for accessing multiple transactional 
		resources within the same transaction. -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entintyManagerFactory" />
	</bean>

</beans>
