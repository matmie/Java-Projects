<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/webflow-config http://www.springframework.org/schema/webflow-config/spring-webflow-config-2.3.xsd"
	xmlns:webflow-config="http://www.springframework.org/schema/webflow-config">

	<!--Za pomocą tego znacznika deklarujemy, że chcemy, by Spring MVC skonfigurował 
		beany DefaultAnnotationHandlerMapping, AnnotationMethodHandlerMapping oraz 
		ExceptionHandlerExceptionResolver Są one niezbędne do przekazywania przez 
		Springa MVC żądań do kontrolerów. Zapewnia to dostęp do wielu przydatnych 
		adnotacji. -->
	<!--enable-matrix-variables="true" wsparcie dla zmiennych tablicowych URI 
		w kontrolerach -->
	<annotation-driven enable-matrix-variables="true" validator="validator"/>
	<!--context:component-scan wskazuje na pakiet, który będzie root-em ustawionyum 
		do poszukiwań klas kontrolerów(@Controller), repozytoriów(@Repository), serwisów(@Service) 
		Tworząc adnotacje @Autowired w jakiejś klasie mechanizm Spring-a będzie szukał 
		klasy, która jest opatrzona odpowienimi adnotacjami(Controller, Repository, 
		Service) zaczynając od tego katalogu -->
	<context:component-scan base-package="com.evaluateyourself.webstore" />
	
	<webflow-config:flow-executor id="flowExecutor" flow-registry="flowRegistry" />
	<webflow-config:flow-registry id="flowRegistry" base-path="/WEB-INF/flows">
		<webflow-config:flow-location path="/checkout/checkout-flow.xml" id="checkout"/>
	</webflow-config:flow-registry>
	
	<beans:bean id="flowHandlerMapping" class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
		<beans:property name="flowRegistry" ref="flowRegistry"></beans:property>
	</beans:bean>
	<beans:bean id="flowHandlerAdapter" class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
		<beans:property name="flowExecutor" ref="flowExecutor" />
	</beans:bean>
	<!--location - definiuje położenie katalogu zawierającego statyczne zasoby -->
	<!--mapping - wskazuje ścieżkę żądania mapowaną przez wskazny katalog. Każde 
		żądanie, którego ścieżka bedzie rozpoczynac się od /resource zostanie odwzorowane 
		na katalog /resources -->
	<!-- /** - wskazuje rekurencyjne przeszukiwanie katalogu -->
	<resources mapping="/resource/**" location="/resources/" />

	<!--Resolver pomaga głównemu servletowi w identyfikacji widoków, które mają 
		byc wygenerowane jako odpowiedź dla konkretnego żadania -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" /> <!-- Metoda kontrolera HomeController:welcome zwraca wartośc "welcome" co 
			dla Resolver-a oznacza tyle, że ścieżka do widoku będzie następująca /WEB-INF/views/welcome.jsp -->
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- Potrzebny żeby używac pliku *.properties do definiowania label-ów pól 
		na formularzach i nie tylko. Używany przez znacznik <spring:message code="wpis 
		z pliku *.properties" /> -->
	<beans:bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<beans:property name="basename" value="messages" />
	</beans:bean>
	<!-- CommonsMultipartResolver określa czy zawartosc żądania jest prosta(zawiera 
		tylko parametry), czy złożona(zawiera równierz pliki), a następnie wyodrębnia 
		z żądania pliki oraz parametry. -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10240000" />
	</beans:bean>

	<!-- Na podstawie danych w żądaniu deleguje dane do odpowiedniego widoku 
		w sekcji defaultViews -->
	<beans:bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<beans:property name="mediaTypes">
			<beans:map>
				<beans:entry key="json" value="application/json;charset=UTF-8" />
				<beans:entry key="xml" value="application/xml;charset=UTF-8" />
				<beans:entry key="html" value="text/html;charset=UTF-8" />
			</beans:map>
		</beans:property>
		<beans:property name="defaultViews">
			<beans:list>
				<beans:ref bean="jsonView" />
				<beans:ref bean="xmlView" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- Konfiguracja beana ktory bedzie generowal widok JSON -->
	<beans:bean id="jsonView"
		class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
		<beans:property name="prettyPrint" value="true" />
	</beans:bean>

	<!-- Konfiguracja beana ktory bedzie generowal widok XML poniewaz w domenach 
		które moga byc transofmowane do XML ustawiamy adnotacje -->
	<beans:bean id="xmlView"
		class="org.springframework.web.servlet.view.xml.MarshallingView">
		<beans:constructor-arg>
			<beans:bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
				<beans:property name="classesToBeBound">
					<beans:list>
						<beans:value>com.evaluateyourself.webstore.domain.Product
						</beans:value>
					</beans:list>
				</beans:property>
			</beans:bean>
		</beans:constructor-arg>
	</beans:bean>
	
	<interceptors>
		<beans:bean class="com.evaluateyourself.webstore.interceptor.PerformanceMonitorInterceptor" />
		<beans:bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<beans:property name="paramName" value="language" />
		</beans:bean>
		<beans:bean class="com.evaluateyourself.webstore.interceptor.AuditingInterceptor" />
		<beans:bean class="com.evaluateyourself.webstore.interceptor.PromoCodeInterceptor" >
			<beans:property name="promoCode" value="OF3RTA" />
			<beans:property name="errorRedirect" value="invalidPromoCode" />
			<beans:property name="offerRedirect" value="products" />
		</beans:bean>
	</interceptors>
	
	<!--Definicja lokalnych ustawień regionalnych  -->
	<beans:bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<beans:property name="defaultLocale" value="pl" />
	</beans:bean>
	
	<!--Validator  -->
	<beans:bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<beans:property name="validationMessageSource" ref="messageSource" />
	</beans:bean>
	
	<beans:bean id="productValidator" class="com.evaluateyourself.webstore.validator.ProductValidator">
		<beans:property name="springValidators">
			<beans:set>
				<beans:ref bean="unitsInStockValidator"/>
				<beans:ref bean="productImageValidator"/>
			</beans:set>
			
		</beans:property>
	</beans:bean>
	<beans:bean id="unitsInStockValidator" class="com.evaluateyourself.webstore.validator.UnitsInStockValidator" />
	<beans:bean id="productImageValidator" class="com.evaluateyourself.webstore.validator.ProductImageValidator" >
		<beans:property name="allowedSize" value="1024"></beans:property>
	</beans:bean>

</beans:beans>